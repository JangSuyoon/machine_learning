# -*- coding: utf-8 -*-
"""HW2_32193869_장수윤.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1UdLAM24nGCUpPNi2U3TtcWZfBWhoYNll
"""

import tensorflow as tf
from tensorflow.keras import datasets, layers, models
import matplotlib.pyplot as plt
from keras.layers import Dense, Dropout, Activation, Flatten
from keras.datasets import cifar10
from keras.models import Sequential
from keras.layers import Dense, Activation
from keras.layers import Conv2D, MaxPooling2D, Flatten
from google.colab.patches import cv2_imshow

#CIFAR-10 dataset 가져오기
(train_images, train_labels), (test_images, test_labels) = datasets.cifar10.load_data()

train_images.shape

train_labels.shape

#정규화
train_images=train_images/255.0
test_images=test_images/255.0

train_labels.shape

model = models.Sequential()
#입력층 설정, 3x3 크기의 32개의 마스크 적용
#--layer1
model.add(layers.Conv2D(32, (3,3), activation='relu', input_shape=train_images.shape[1:]))
model.add(layers.MaxPooling2D((2,2)))
model.add(Dropout(0.25))

#--layer2
model.add(layers.Conv2D(64, (4,4), activation='relu'))
model.add(layers.Conv2D(64, (3,3), activation='relu'))
model.add(layers.MaxPooling2D(2,2))
model.add(Dropout(0.25))

model.add(layers.Conv2D(128, (3,3), activation='relu'))
model.add(layers.Conv2D(128, (3,3), activation='relu'))
#model.add(layers.MaxPooling2D(2,2))

#model.add(layers.Conv2D(256, (3,3), activation='relu'))
#model.add(layers.MaxPooling2D(2,2))

model.summary()

#N차원 배열을 1차원으로 펴준다
model.add(layers.Flatten())
model.add(layers.Dense(64, activation='relu'))
model.add(layers.Dense(32, activation='relu'))
model.add(layers.Dense(10))
model.add(layers.Dense(10, activation='softmax'))

model.summary()

#train_labels = tf.keras.utils.to_categorical(train_labels,10)
#test_labels = tf.keras.utils.to_categorical(test_labels,10)
model.compile(optimizer='adam', loss=tf.keras.losses.SparseCategoricalCrossentropy(from_logits=True), metrics=['accuracy'])
history=model.fit(train_images, train_labels, epochs=100, validation_data=(test_images, test_labels))

plt.plot(history.history['accuracy'], label='accuracy')
plt.plot(history.history['val_accuracy'], label = 'val_accuracy')
plt.xlabel('Epoch')
plt.ylabel('Accuracy')
plt.ylim([0.5, 1])
plt.legend(loc='lower right')

test_loss, test_acc = model.evaluate(test_images,  test_labels, verbose=2)
print(test_acc)

